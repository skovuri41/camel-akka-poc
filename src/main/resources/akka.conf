akka {
  version = "1.3.1"   # Akka version, checked against the runtime version of Akka.
  event-handlers = ["akka.event.slf4j.Slf4jEventHandler"]
  #event-handlers = ["akka.event.EventHandler$DefaultListener"]
  event-handler-level = "DEBUG" # Options: ERROR, WARNING, INFO, DEBUG
  
  # Comma separated list of the enabled modules.
  #enabled-modules = ["camel", "spring"]
  enabled-modules = []
  
  time-unit = "seconds"      # Time unit for all timeout properties throughout the config
  
  # These boot classes are loaded (and created) automatically when the Akka Microkernel boots up
  #     Can be used to bootstrap your application(s)
  #     Should be the FQN (Fully Qualified Name) of the boot class which needs to have a default constructor
  # boot = ["sample.camel.Boot",
  #         "sample.rest.java.Boot",
  #         "sample.rest.scala.Boot",
  # 
  
  boot = []
  
  actor {
    serialize-messages = off           # Does a deep clone of (non-primitive) messages to ensure immutability
    throughput = 10  # Throughput for ExecutorBasedEventDrivenDispatcher, set to 1 for complete fairness
    
     default-dispatcher {
      type = "ExecutorBasedEventDriven" # Must be one of the following, all "Global*" are non-configurable
                                              #   - ExecutorBasedEventDriven
                                              #   - ExecutorBasedEventDrivenWorkStealing
                                              #   - GlobalExecutorBasedEventDriven
      daemonic = off                   # If the Threads created for this dispatcher should be daemons or not
      keep-alive-time = 60             # Keep alive time for threads
      core-pool-size-factor = 1.0      # No of core threads ... ceil(available processors * factor)
      max-pool-size-factor  = 4.0      # Max no of threads ... ceil(available processors * factor)
      executor-bounds = -1             # Makes the Executor bounded, -1 is unbounded
      task-queue-size = -1             # Specifies the bounded capacity of the task queue (< 1 == unbounded)
      task-queue-type = "linked"       # Specifies which type of task queue will be used, can be "array" or "linked" (default)
      allow-core-timeout = on          # Allow core threads to time out
      rejection-policy = "sane"        # sane, abort, caller-runs, discard-oldest, discard
      throughput = 5                   # Throughput for ExecutorBasedEventDrivenDispatcher, set to 1 for complete fairness
      throughput-deadline-time = -1    # Throughput deadline for ExecutorBasedEventDrivenDispatcher, set to 0 or negative for no deadline
      mailbox-capacity = -1            # If negative (or zero) then an unbounded mailbox is used (default)
                                       # If positive then a bounded mailbox is used and the capacity is set using the property
                                       # NOTE: setting a mailbox to 'blocking' can be a bit dangerous,
                                       #       could lead to deadlock, use with care
                                       #
                                       # The following are only used for ExecutorBasedEventDriven
                                       # and only if mailbox-capacity > 0
      mailbox-push-timeout-time = 10   # Specifies the timeout to add a new message to a mailbox that is full - negative number means infinite timeout
                                       #       (in unit defined by the time-unit property)
    }
  }
  
 debug {
      receive = "false"       # enable function of Actor.loggable(), which is
                              # to log any received message at DEBUG level
      autoreceive = "false"   # enable DEBUG logging of all AutoReceiveMessages
                              # (Kill, PoisonPill and the like)
      lifecycle = "true"     # enable DEBUG logging of actor lifecycle changes
  }
  
}